/**
 * 吴乐川
 * 2022-05-19
 *
 * 本文件为本工具集之所有测试集之入口。
 */





/**
 * @typedef {import('./一整套测试任务集')} 范_一整套测试任务集
 */





Promise.all([
    import('./一整套测试任务集.js'),
]).then(([
    一整套测试任务集_模块,
]) => {
    const 应开启调试功能 = false



    应开启调试功能 && console.debug('\n\n\n\n\n@wulechuan/cli-scripts--npm-project-helpers ：一整套测试任务集.js 。\n\n\n\n\n')

    /** @type {范_一整套测试任务集} */
    const 一整套测试任务集 = 一整套测试任务集_模块.default

    return new Promise((落实, 落空) => {
        const 等待的秒数 = 1
        应开启调试功能 && console.debug(`\n\n@wulechuan/cli-scripts--npm-project-helpers ： 故意等待 ${等待的秒数} 秒钟。\n\n`)
        setTimeout(落实, 等待的秒数 * 1000)
    }).then(() => 一整套测试任务集({
        应开启调试功能,

        本套测试任务集之称谓: '测试任务集甲',

        执行各项功能之前应先呈现本工具之简介: true,
        用于研发阶段的命令行工具集_这一文件夹之相对路径: '故意采用外国话试一试，\\而且要试一试不止一个层级\\wlc-cli-tools/',
        发布本工具集随附的命令行脚本时_个别脚本文件应发布在目标项目之根文件夹下: false,

        视作_dotvscode_文件夹的文件夹之相对路径: '测试集/各测试任务产出的文件/.vscode',
        vscode_tasksJSON_纵使有变动也不应制作备份文件: false,

        本工具集随附命令行应用范本集文件夹之相对路径: null,
        用于容纳发布的各命令行脚本的文件树之根文件夹之相对路径: '测试集/各测试任务产出的文件',
        发布本工具集随附的命令行脚本时应覆盖旧有的命令行脚本文件: true,
        发布本工具集随附的命令行脚本时若覆盖旧有的命令行脚本文件则先行备份: false,
        // })).then(() => 一整套测试任务集({
        //     应开启调试功能,

        //     本套测试任务集之称谓: '测试任务集乙',

        //     执行各项功能之前应先呈现本工具之简介: false,
        //     用于研发阶段的命令行工具集_这一文件夹之相对路径: null,
        //     发布本工具集随附的命令行脚本时_个别脚本文件应发布在目标项目之根文件夹下: false,

        //     视作_dotvscode_文件夹的文件夹之相对路径: '测试集/各测试任务产出的文件/.vscode',
        //     vscode_tasksJSON_纵使有变动也不应制作备份文件: false,

        //     本工具集随附命令行应用范本集文件夹之相对路径: null,
        //     用于容纳发布的各命令行脚本的文件树之根文件夹之相对路径: '测试集/各测试任务产出的文件',
        //     发布本工具集随附的命令行脚本时应覆盖旧有的命令行脚本文件: true,
        //     发布本工具集随附的命令行脚本时若覆盖旧有的命令行脚本文件则先行备份: false,
    }))
})
